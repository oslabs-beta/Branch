{
  "version": 3,
  "sources": ["../src/main.js"],
  "sourcesContent": ["const treeData = {\n  name: 'http://localhost:3000',\n  parent: null,\n  children: [\n    {\n      name: '/chore',\n      parent: 'http://localhost:3000',\n      children: [\n        {\n          name: '/',\n          method: ['GET, POST'],\n          parent: 'router1',\n          children: [\n            {\n              name: 'GET',\n              method: ['GET'],\n              parent: 'router1',\n              reqParamRequired: 'true',\n              children: null,\n            },\n            {\n              name: 'POST',\n              method: ['POST'],\n              parent: 'router1',\n              reqParamRequired: 'true',\n              children: null,\n            },\n          ],\n        },\n        {\n          name: '/pasta',\n          method: ['POST'],\n          parent: 'router1',\n          children: null,\n        },\n      ]\n    },\n    {\n      name: '/',\n      method: ['GET', 'POST'],\n      children: null,\n      parent: 'http://localhost:3000',\n    },\n  ],\n};\n\nconst margin = { top: 20, right: 120, bottom: 20, left: 175 },\n  width = 800 - margin.right - margin.left,\n  height = 400 - margin.top - margin.bottom;\nlet i = 0;\nconst duration = 750;\nconst root = treeData;\nlet tree = d3.layout.tree().size([height, width]);\nlet diagonal = d3.svg.diagonal().projection(function (d) {\n  return [d.y, d.x];\n});\nlet svg = d3\n  .select('.treeContainer')\n  .append('svg')\n  .attr('width', width + margin.right + margin.left)\n  .classed('svg', true)\n  .attr('height', height + margin.top + margin.bottom)\n  .append('g')\n  .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\nroot.x0 = height / 2;\nroot.y0 = 0;\nupdate(root);\nd3.select(self.frameElement).style('height', '400px');\nd3.select(self.frameElement).style('width', '800px');\nfunction update(source) {\n  // Compute the new tree layout.\n  const nodes = tree.nodes(root).reverse(),\n    links = tree.links(nodes);\n  // Update the nodes\u2026\n  const node = svg.selectAll('g.node').data(nodes, function (d) {\n    return d.id || (d.id = ++i);\n  });\n  // Enter any new nodes at the parent's previous position.\n  const nodeEnter = node\n    .enter()\n    .append('g')\n    .attr('class', 'node')\n    .attr('transform', function (d) {\n      return 'translate(' + source.y0 + ',' + source.x0 + ')';\n    })\n    .on('click', click);\n  nodeEnter\n    .append('circle')\n    .attr('r', 1e-6)\n    .style('fill', function (d) {\n      return d._children ? 'lightsteelblue' : '#fff';\n    });\n  nodeEnter\n    .append('text')\n    .attr('x', function (d) {\n      return d.children || d._children ? -13 : 13;\n    })\n    .attr('dy', '.35em')\n    .attr('text-anchor', function (d) {\n      return d.children || d._children ? 'end' : 'start';\n    })\n    .text(function (d) {\n      return d.name;\n    })\n    .style('fill-opacity', 1e-6);\n  // Transition nodes to their new position.\n  const nodeUpdate = node\n    .transition()\n    .duration(duration)\n    .attr('transform', function (d) {\n      return 'translate(' + d.y + ',' + d.x + ')';\n    });\n  nodeUpdate\n    .select('circle')\n    .attr('r', 10)\n    .style('fill', function (d) {\n      return d._children ? 'lightsteelblue' : '#fff';\n    });\n  nodeUpdate.select('text').style('fill-opacity', 1);\n  // Transition exiting nodes to the parent's new position.\n  const nodeExit = node\n    .exit()\n    .transition()\n    .duration(duration)\n    .attr('transform', function (d) {\n      return 'translate(' + source.y + ',' + source.x + ')';\n    })\n    .remove();\n  nodeExit.select('circle').attr('r', 1e-6);\n  nodeExit.select('text').style('fill-opacity', 1e-6);\n  // Update the links\u2026\n  let link = svg.selectAll('path.link').data(links, function (d) {\n    return d.target.id;\n  });\n  // Enter any new links at the parent's previous position.\n  link\n    .enter()\n    .insert('path', 'g')\n    .attr('class', 'link')\n    .attr('d', function (d) {\n      const o = { x: source.x0, y: source.y0 };\n      return diagonal({ source: o, target: o });\n    });\n  // Transition links to their new position.\n  link.transition().duration(duration).attr('d', diagonal);\n  // Transition exiting nodes to the parent's new position.\n  link\n    .exit()\n    .transition()\n    .duration(duration)\n    .attr('d', function (d) {\n      const o = { x: source.x, y: source.y };\n      return diagonal({ source: o, target: o });\n    })\n    .remove();\n  // Stash the old positions for transition.\n  nodes.forEach(function (d) {\n    d.x0 = d.x;\n    d.y0 = d.y;\n  });\n}\nlet pathStr = '';\n// Event handler for clicking a node\nfunction click(d, node) {\n\n\n  //get the node clicked on and change the color so that we know which route is being checked\n\n  //check if d.reqParamRequired === true\n  //if true, move cursor to query key box and popup alert or message saying to add params\n  //if param required and key input empty\n  pathStr = '';\n  let input = document.querySelector('#url');\n  input.value = '';\n  // console.log('method', d.method);\n  if (d.method) {\n    const fullPath = [];\n    console.log('d.parent', d.parent);\n    const tempD = structuredClone(d);\n    while (tempD.parent) {\n      fullPath.unshift(tempD.parent);\n      tempD.parent = tempD.parent.parent;\n    }\n    for (let i = 0; i < fullPath.length; i++) {\n      if (fullPath[i].name) {\n        pathStr += fullPath[i].name;\n      }\n    }\n    // console.log('PATHSTR', pathStr);\n  }\n  if (d.reqParamRequired) {\n    // console.log(pathStr);\n    input.value = pathStr + ':ENTER PARAM HERE';\n    // return addAlert();\n  }\n\n  fetch(pathStr)\n    .then((data) => data.json())\n    .then((data) => {\n      data = JSON.stringify(data);\n      codemirror.getDoc().setValue(data);\n    });\n  if (d.children) {\n    d._children = d.children;\n    d.children = null;\n  } else {\n    d.children = d._children;\n    d._children = null;\n  }\n  update(d);\n}\n\n\nlet bodyObj = {};\n\n\n//click handler for query params - input args?\nfunction checkRoute() {\n  console.log('Pathstr', pathStr);\n  const key = document.getElementById('key').value;\n  console.log(key);\n  document.getElementById('key').value = '';\n  const value = document.getElementById('value').value;\n  console.log(value);\n  document.getElementById('value').value = '';\n\n  // console.log(bodyObj);\n  // console.log(pathStr);\n  fetch(pathStr, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(bodyObj),\n  })\n    .then((data) => data.json())\n    .then((data) => {\n      data = JSON.stringify(data);\n      codemirror.getDoc().setValue(data);\n    });\n}\n\nconst addParams = () => {\n  const keyInfo = document.getElementById('key').value;\n  document.getElementById('key').value = '';\n  const valueInfo = document.getElementById('value').value;\n  document.getElementById('value').value = '';\n  bodyObj[keyInfo] = valueInfo;\n  document.querySelector('.reqObj').innerText = JSON.stringify(bodyObj);\n};\n\n// const addAlert = function () {\n//   let h2 = document.querySelector('.alert');\n\n//   h2.innerText = 'Please enter a req param';\n// };\n\nconst checkParam = () => {\n  const urlPath = document.querySelector('#url').value;\n  fetch(urlPath)\n    .then((data) => data.json())\n    .then((data) => {\n      data = JSON.stringify(data);\n      codemirror.getDoc().setValue(data);\n    });\n};\n"],
  "mappings": "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",
  "names": ["i"]
}
