{
  "version": 3,
  "sources": ["../src/main.js"],
  "sourcesContent": ["const treeData = {\n  name: 'http://localhost:3000',\n  parent: null,\n  children: [\n    {\n      name: '/chore',\n      parent: 'http://localhost:3000',\n      children: [\n        {\n          name: '/',\n          method: ['GET, POST'],\n          parent: 'router1',\n          children: [\n            {\n              name: 'GET',\n              method: ['GET'],\n              parent: 'router1',\n              reqParamRequired: 'true',\n              children: null,\n            },\n            {\n              name: 'POST',\n              method: ['POST'],\n              parent: 'router1',\n              reqParamRequired: 'true',\n              children: null,\n            },\n          ],\n        },\n        {\n          name: '/pasta',\n          method: ['POST'],\n          parent: 'router1',\n          children: null,\n        },\n      ]\n    },\n    {\n      name: '/',\n      method: ['GET', 'POST'],\n      children: null,\n      parent: 'http://localhost:3000',\n    },\n  ],\n};\n\nconst displayTree = (treeData) => {\n  const margin = { top: 20, right: 120, bottom: 20, left: 175 },\n    width = 800 - margin.right - margin.left,\n    height = 400 - margin.top - margin.bottom;\n  let i = 0;\n  const duration = 750;\n  const root = treeData;\n  let tree = d3.layout.tree().size([height, width]);\n  let diagonal = d3.svg.diagonal().projection(function (d) {\n    return [d.y, d.x];\n  });\n  let svg = d3\n    .select('.treeContainer')\n    .append('svg')\n    .attr('width', width + margin.right + margin.left)\n    .classed('svg', true)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n  root.x0 = height / 2;\n  root.y0 = 0;\n  update(root);\n  d3.select(self.frameElement).style('height', '400px');\n  d3.select(self.frameElement).style('width', '800px');\n  function update(source) {\n    // Compute the new tree layout.\n    const nodes = tree.nodes(root).reverse(),\n      links = tree.links(nodes);\n    // Update the nodes\u2026\n    const node = svg.selectAll('g.node').data(nodes, function (d) {\n      return d.id || (d.id = ++i);\n    });\n    // Enter any new nodes at the parent's previous position.\n    const nodeEnter = node\n      .enter()\n      .append('g')\n      .attr('class', 'node')\n      .attr('transform', function (d) {\n        return 'translate(' + source.y0 + ',' + source.x0 + ')';\n      })\n      .on('click', click);\n    nodeEnter\n      .append('circle')\n      .attr('r', 1e-6)\n      .style('fill', function (d) {\n        return d._children ? 'lightsteelblue' : '#fff';\n      });\n    nodeEnter\n      .append('text')\n      .attr('x', function (d) {\n        return d.children || d._children ? -13 : 13;\n      })\n      .attr('dy', '.35em')\n      .attr('text-anchor', function (d) {\n        return d.children || d._children ? 'end' : 'start';\n      })\n      .text(function (d) {\n        return d.name;\n      })\n      .style('fill-opacity', 1e-6);\n    // Transition nodes to their new position.\n    const nodeUpdate = node\n      .transition()\n      .duration(duration)\n      .attr('transform', function (d) {\n        return 'translate(' + d.y + ',' + d.x + ')';\n      });\n    nodeUpdate\n      .select('circle')\n      .attr('r', 10)\n      .style('fill', function (d) {\n        return d._children ? 'lightsteelblue' : '#fff';\n      });\n    nodeUpdate.select('text').style('fill-opacity', 1);\n    // Transition exiting nodes to the parent's new position.\n    const nodeExit = node\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('transform', function (d) {\n        return 'translate(' + source.y + ',' + source.x + ')';\n      })\n      .remove();\n    nodeExit.select('circle').attr('r', 1e-6);\n    nodeExit.select('text').style('fill-opacity', 1e-6);\n    // Update the links\u2026\n    let link = svg.selectAll('path.link').data(links, function (d) {\n      return d.target.id;\n    });\n    // Enter any new links at the parent's previous position.\n    link\n      .enter()\n      .insert('path', 'g')\n      .attr('class', 'link')\n      .attr('d', function (d) {\n        const o = { x: source.x0, y: source.y0 };\n        return diagonal({ source: o, target: o });\n      });\n    // Transition links to their new position.\n    link.transition().duration(duration).attr('d', diagonal);\n    // Transition exiting nodes to the parent's new position.\n    link\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('d', function (d) {\n        const o = { x: source.x, y: source.y };\n        return diagonal({ source: o, target: o });\n      })\n      .remove();\n    // Stash the old positions for transition.\n    nodes.forEach(function (d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  }\n}\n\nwindow.addEventListener('message', msg => {displayTree(msg.data)});\nlet pathStr = '';\n// Event handler for clicking a node\nfunction click(d, node) {\n\n\n  //get the node clicked on and change the color so that we know which route is being checked\n\n  //check if d.reqParamRequired === true\n  //if true, move cursor to query key box and popup alert or message saying to add params\n  //if param required and key input empty\n  pathStr = '';\n  let input = document.querySelector('#url');\n  input.value = '';\n  // console.log('method', d.method);\n  if (d.method) {\n    const fullPath = [];\n    console.log('d.parent', d.parent);\n    const tempD = structuredClone(d);\n    while (tempD.parent) {\n      fullPath.unshift(tempD.parent);\n      tempD.parent = tempD.parent.parent;\n    }\n    for (let i = 0; i < fullPath.length; i++) {\n      if (fullPath[i].name) {\n        pathStr += fullPath[i].name;\n      }\n    }\n    // console.log('PATHSTR', pathStr);\n  }\n  if (d.reqParamRequired) {\n    // console.log(pathStr);\n    input.value = pathStr + ':ENTER PARAM HERE';\n    // return addAlert();\n  }\n\n  fetch(pathStr)\n    .then((data) => data.json())\n    .then((data) => {\n      data = JSON.stringify(data);\n      codemirror.getDoc().setValue(data);\n    });\n  if (d.children) {\n    d._children = d.children;\n    d.children = null;\n  } else {\n    d.children = d._children;\n    d._children = null;\n  }\n  update(d);\n}\n\nlet bodyObj = {};\n\n//click handler for query params - input args?\n// eslint-disable-next-line no-unused-vars\nfunction checkRoute() {\n  console.log('Pathstr', pathStr);\n  const key = document.getElementById('key').value;\n  console.log(key);\n  document.getElementById('key').value = '';\n  const value = document.getElementById('value').value;\n  console.log(value);\n  document.getElementById('value').value = '';\n\n  // console.log(bodyObj);\n  // console.log(pathStr);\n  fetch(pathStr, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(bodyObj),\n  })\n    .then((data) => data.json())\n    .then((data) => {\n      data = JSON.stringify(data);\n      codemirror.getDoc().setValue(data);\n    });\n}\n\n// eslint-disable-next-line no-unused-vars\nconst addParams = () => {\n  const keyInfo = document.getElementById('key').value;\n  document.getElementById('key').value = '';\n  const valueInfo = document.getElementById('value').value;\n  document.getElementById('value').value = '';\n  bodyObj[keyInfo] = valueInfo;\n  document.querySelector('.reqObj').innerText = JSON.stringify(bodyObj);\n};\n\n// const addAlert = function () {\n//   let h2 = document.querySelector('.alert');\n\n//   h2.innerText = 'Please enter a req param';\n// };\n\n// eslint-disable-next-line no-unused-vars\nconst checkParam = () => {\n  const urlPath = document.querySelector('#url').value;\n  fetch(urlPath)\n    .then((data) => data.json())\n    .then((data) => {\n      data = JSON.stringify(data);\n      codemirror.getDoc().setValue(data);\n    });\n};\n"],
  "mappings": "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",
  "names": ["update"]
}
